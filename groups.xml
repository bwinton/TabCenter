<?xml version="1.0"?>
<!DOCTYPE bindings [
<!ENTITY % tabBrowserDTD SYSTEM "chrome://browser/locale/tabbrowser.dtd">
<!ENTITY newGroup.label "New Group">  <!-- TODO l10n -->
%tabBrowserDTD;
]>

<bindings id="groupBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="verticaltabs-grouptab"
           extends="chrome://browser/content/tabbrowser.xml#tabbrowser-tab">
    <content closetabtext="&closeTab.label;">
      <xul:hbox class="verticaltabs-twisty-container"
            role="presentation">
        <xul:image class="verticaltabs-twisty"
                   role="presentation"/>
      </xul:hbox>
      <xul:image xbl:inherits="validate,src=image"
                 class="tab-icon-image"
                 role="presentation"
                 collapsed="true"/>

      <xul:label class="tab-text"
                 role="presentation">&newGroup.label;</xul:label>
      <xul:textbox flex="1"
                   class="verticaltabs-textbox"
                   value="&newGroup.label;"
                   collapsed="true"/>

      <xul:spacer flex="1"/>
      <xul:label class="verticaltabs-counter"
                 role="presentation">0</xul:label>
      <xul:toolbarbutton anonid="close-button"
                         tabindex="-1"
                         class="tab-close-button"/>
    </content>

    <implementation implements="nsIDOMEventListener">
      <field name="mTwisty" readonly="true">
        document.getAnonymousElementByAttribute(this, "class", "verticaltabs-twisty");
      </field>
      <field name="mLabel" readonly="true">
        document.getAnonymousElementByAttribute(this, "class", "tab-text");
      </field>
      <field name="mTextbox" readonly="true">
        document.getAnonymousElementByAttribute(this, "class", "verticaltabs-textbox");
      </field>
      <field name="mCounter" readonly="true">
        document.getAnonymousElementByAttribute(this, "class", "verticaltabs-counter");
      </field>

      <constructor><![CDATA[
        this.mLabel.addEventListener('dblclick', this, false);
        this.mTextbox.addEventListener('keypress', this, false);
        this.mTextbox.addEventListener('blur', this, false);

        // Synchronize with SessionStore
        let label = this.getAttribute(VerticalTabs.groups.kLabel);
        if (label) {
            this.groupLabel = label;
        }
      ]]></constructor>

      <property name="groupLabel">
        <getter>
          return this.mLabel.firstChild.nodeValue;
        </getter>
        <setter><![CDATA[
          this.mLabel.firstChild.nodeValue = val;
          this.mTextbox.value = val;

          // Synchronize with SessionStore
          VTTabDataStore.setTabValue(this, VerticalTabs.groups.kLabel, val);
        ]]></setter>
      </property>

      <method name="editLabel">
        <body><![CDATA[
          this.mLabel.collapsed = true;
          this.mTextbox.collapsed = false;
          this.mTextbox.focus();
          this.mTextbox.select();
        ]]></body>
      </method>

      <method name="finishEditingLabel">
        <body><![CDATA[
          var text = this.mTextbox.value.trim();
          if (!text) {
              return;
          }
          this.groupLabel = text;

          this.mLabel.collapsed = false;
          this.mTextbox.collapsed = true;
          this.mLabel.focus();
        ]]></body>
      </method>

      <!-- nsIDOMEventListener -->

      <method name="handleEvent">
        <parameter name="aEvent"/>
        <body><![CDATA[
          switch (aEvent.type) {
          case 'dblclick':
              this.editLabel();
              return;
          case 'keypress':
              if (aEvent.keyCode == aEvent.DOM_VK_ENTER ||
                  aEvent.keyCode == aEvent.DOM_VK_RETURN ||
                  aEvent.keyCode == aEvent.DOM_VK_ESCAPE) {
                  this.finishEditingLabel();
              }
              aEvent.stopPropagation();
              return;
          case 'blur':
              this.finishEditingLabel();
              return;
          }
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="mousedown" button="0" phase="capturing"><![CDATA[
        // Prevent the tab from being selected when the twisty is being clicked
        if (event.originalTarget === this.mTwisty) {
            event.stopPropagation();
        }
      ]]></handler>
    </handlers>
  </binding>
</bindings>
