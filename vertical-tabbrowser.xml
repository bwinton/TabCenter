<?xml version="1.0"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!DOCTYPE bindings [
<!ENTITY % tabBrowserDTD SYSTEM "chrome://browser/locale/tabbrowser.dtd" >
%tabBrowserDTD;
]>

<bindings id="verticalTabBrowserBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml">

  <binding id="tabbrowser-arrowscrollbox" extends="chrome://browser/content/tabbrowser.xml#tabbrowser-arrowscrollbox">
    <implementation>
      <field name="_isRTLScrollbox"><![CDATA[
        document.getElementById('tabbrowser-tabs').getAttribute('opentabstop') === 'true';
      ]]></field>

      <property name="_verticalTabs" onget="return this.orient == 'vertical';"/>

      <property name="_lowHighProps">
        <getter><![CDATA[
          //TC: pinned tabs stay at the top when reversed but the index does not change
          //this is a work-around for that
          let elements = this._getScrollableElements();
          let low = 0;
          let high = elements.length - 1;

          if (this._isRTLScrollbox){
            elements.reverse();
            elements.every(function (tab, index){
              if (tab.pinned === true){
                low = index;
              }
              return !tab.pinned;
            });

            if (elements[high].pinned){
              elements.every(function (tab, index){
                if (tab.pinned === true){
                  return false;
                }
                high = index;
                return true;
              });
            }
          }
          return [low, high];
        ]]></getter>
      </property>

      <property name="lineScrollAmount" readonly="true">
        <getter><![CDATA[
          // line scroll amout should be the width (at horizontal scrollbox) or
          // the height (at vertical scrollbox) of the scrolled elements.
          // However, the elements may have different width or height.  So,
          // for consistent speed, let's use avalage with of the elements.
          let elements = this._getScrollableElements();
          if (!elements.length) {
            // Returning 0 shouldn't be problem because if there is no
            // scrollable elements, it's impossible to scroll anyway.
            return 0;
          }

          let [start, end] = this._startEndProps;
          let [low, high] = this._lowHighProps;

          // XXX If the total width is 0, do we need something more?
          let totalWidth =
            elements[high].getBoundingClientRect()[end] - elements[low].getBoundingClientRect()[start];
          return totalWidth / elements.length;
        ]]></getter>
      </property>

      <method name="_canScrollToElement">
        <parameter name="tab"/>
        <body><![CDATA[
          let canScroll = !tab.hidden && !this.skipNextScroll;
          this.skipNextScroll = false;
          return canScroll;
        ]]></body>
      </method>

      <method name="_elementFromPoint">
        <parameter name="aX"/>
        <parameter name="aPhysicalScrollDir"/>
        <body><![CDATA[

          let elements = this._getScrollableElements();
          if (!elements.length){
            return null;
          }

          let [start, end] = this._startEndProps;
          let [low, high] = this._lowHighProps;

          if (aX < elements[low].getBoundingClientRect()[start] ||
          aX > elements[high].getBoundingClientRect()[end]) {
            return null;
          }

          let mid, rect;
          while (low <= high) {
            mid = Math.floor((low + high) / 2);
            rect = elements[mid].getBoundingClientRect();
            if (rect[start] > aX) {
              high = mid - 1;
            } else if (rect[end] < aX) {
              low = mid + 1;
            } else {
              return elements[mid];
            }
          }

          // There's no element at the requested coordinate, but the algorithm
          // from above yields an element next to it, in a random direction.
          // The desired scrolling direction leads to the correct element.

          if (!aPhysicalScrollDir){
            return null;
          }

          if (aPhysicalScrollDir < 0 && rect[start] > aX){
            mid = Math.max(mid - 1, 0);
          } else if (aPhysicalScrollDir > 0 && rect[end] < aX){
            mid = Math.min(mid + 1, elements.length - 1);
          }

          return elements[mid];
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="underflow" phase="capturing"><![CDATA[
        if (event.detail === (this._verticalTabs ? 1 : 0)){
          return; // Ignore other-direction events
        }

        let tabs = document.getBindingParent(this);

        if (tabs.clientHeight >= this.clientHeight) {
          this.removeAttribute('notoverflowing');
        } else {
          this.setAttribute('notoverflowing', 'true');
        }

        if (tabs._lastTabClosedByMouse) {
          tabs._expandSpacerBy(this._scrollButtonDown.clientWidth);
        }

        tabs.tabbrowser._removingTabs.forEach(tabs.tabbrowser.removeTab,
                                              tabs.tabbrowser);
      ]]></handler>
      <handler event="overflow"><![CDATA[
        if (event.detail === (this._verticalTabs ? 1 : 0)){
          return; // Ignore other-direction events
        }
        let tabs = document.getBindingParent(this);

        if (tabs.clientHeight >= this.clientHeight) {
          this.removeAttribute('notoverflowing');
        } else {
          this.setAttribute('notoverflowing', 'true');
        }

        let numberOfTabs = tabs.tabbrowser.visibleTabs.length;
        if (numberOfTabs === 1) {
          return;
        }
      ]]></handler>
    </handlers>
  </binding>

  <binding id="tabbrowser-tabs"
           extends="chrome://browser/content/tabbrowser.xml#tabbrowser-tabs">
    <content>
      <xul:hbox align="end">
        <xul:image class="tab-drop-indicator" anonid="tab-drop-indicator" collapsed="true"/>
      </xul:hbox>
      <xul:arrowscrollbox anonid="arrowscrollbox"
                          vertical="true"
                          flex="1"
                          xbl:inherits="orient"
                          style="min-width: 40px;"
                          clicktoscroll="true"
                          class="tabbrowser-arrowscrollbox">
        <children includes="tab"/>
        <xul:vbox pack="center" id="filler-tab" hidden="true">
          <xul:label/>
        </xul:vbox>
        <xul:toolbarbutton class="tabs-newtab-button"
                           command="cmd_newNavigatorTab"
                           onclick="checkForMiddleClick(this, event);"
                           onmouseover="document.getBindingParent(this)._enterNewTab();"
                           onmouseout="document.getBindingParent(this)._leaveNewTab();"
                           tooltip="dynamic-shortcut-tooltip"/>
        <xul:spacer class="closing-tabs-spacer" anonid="closing-tabs-spacer"
                    style="width: 0;"/>
      </xul:arrowscrollbox>
    </content>

    <implementation implements="nsIDOMEventListener">
      <field name="mTabstripHeight">0;</field>

      <property name="_verticalTabs" onget="return this.orient === 'vertical';"/>

      <!-- Try to keep the active tab's close button under the mouse cursor -->
      <method name="_lockTabSizing">
        <parameter name="aTab"/>
        <body><![CDATA[
          // XXX I don't think this is necessary for vertical tabs
          return;
        ]]></body>
      </method>

      <method name="_unlockTabSizing">
        <body><![CDATA[
          // XXX I don't think this is necessary for vertical tabs
          return;
        ]]></body>
      </method>

      <method name="_positionPinnedTabs">
        <body><![CDATA[
          let numPinned = this.tabbrowser._numPinnedTabs;
          this.removeAttribute('positionpinnedtabs');

          for (let i = 0; i < numPinned; i++) {
            let tab = this.childNodes[i];
            tab.style.MozMarginStart = '';
          }

          this.style.MozPaddingStart = '';

          if (this._lastNumPinned !== numPinned) {
            this._lastNumPinned = numPinned;
            this._handleTabSelect(false);
          }
        ]]></body>
      </method>

      <method name="_animateTabMove">
        <parameter name="event"/>
        <body><![CDATA[
          let draggedTab = event.dataTransfer.mozGetDataAt(TAB_DROP_TYPE, 0);
          if (this.getAttribute('movingtab') !== 'true') {
            this.setAttribute('movingtab', 'true');
            this.selectedItem = draggedTab;
          }

          if (!('animLastScreenPos' in draggedTab._dragData)) {
            // XXX verticalTabs hack -- this isn't set on dragstart (only screenX is),
            // but we can fake it here.  We also call scrollX scrollPosition.
            draggedTab._dragData.screenY = event.screenY;
            draggedTab._dragData.scrollPos = draggedTab._dragData.scrollX;
            draggedTab._dragData.animLastScreenPos = draggedTab._dragData.screenY;
          }

          let screenPos = event.screenY;
          if (screenPos === draggedTab._dragData.animLastScreenPos) {
            return;
          }

          draggedTab._dragData.animLastScreenPos = screenPos;

          let reverse = this.getAttribute('opentabstop') === 'true';
          //if (window.getComputedStyle(this).direction === 'rtl') reverse=!reverse;

          let pinned = draggedTab.pinned;
          let numPinned = this.tabbrowser._numPinnedTabs;
          let tabs = this.tabbrowser.visibleTabs
                                    .slice(pinned ? 0 : numPinned,
                                           pinned ? numPinned : undefined);
          if (reverse) {
            tabs.reverse();
          }

          let tabSize = draggedTab.getBoundingClientRect().height;

          // Move the dragged tab based on the mouse position.

          let leftTab = tabs[0];
          let rightTab = tabs[tabs.length - 1];
          let tabScreenPos = draggedTab.boxObject.screenY;
          // console.log('tabScreenPos', tabScreenPos);
          let translateVal = screenPos - draggedTab._dragData.screenY;
          // console.log('translateVal 1', translateVal);
          translateVal += this.mTabstrip.scrollPosition - draggedTab._dragData.scrollX; // XXX verticalTabs always scrollX here, it's actually the scrollPosition
          let minBound = leftTab.boxObject.screenY - tabScreenPos;
          let maxBound = (rightTab.boxObject.screenY + rightTab.boxObject.height) -
                           (tabScreenPos + tabSize);
          translateVal = Math.max(translateVal, minBound);
          translateVal = Math.min(translateVal, maxBound);
          draggedTab.style.transform = 'translateY(' + translateVal + 'px)';
          // console.log('draggedTab transform: ' + draggedTab.style.transform + ' should be ' + 'translateY(' + translateVal + 'px)');

          let tabbrowser = document.getElementById('tabbrowser-tabs');
          let scrollbox = document.getAnonymousElementByAttribute(tabbrowser, 'anonid', 'arrowscrollbox');
          let scrollbuttonDown = document.getAnonymousElementByAttribute(scrollbox, 'anonid', 'scrollbutton-down');
          let scrollbuttonUp = document.getAnonymousElementByAttribute(scrollbox, 'anonid', 'scrollbutton-up');
          let mouseY = event.clientY;
          let mainWindow = document.getElementById('main-window');

          let bottomMin = tabbrowser.boxObject.height + 5;
          let topMax;
          if (navigator.userAgent.indexOf('Mac') !== -1) {
            if (mainWindow.getAttribute('lwtheme') === 'true') {
              topMax = 92;
            } else {
              topMax = 70;
            }
          } else if (navigator.userAgent.indexOf('Win') !== -1 || navigator.userAgent.indexOf('Linux') !== -1) {
            topMax = 69;
          } else {
            topMax = 80; // best guess for average
          }

          if (tabbrowser.getAttribute('mouseInside') === 'true' && mouseY > bottomMin && mouseY < bottomMin + 30){
            //if tabs are reversed trigger the opposite button's scroll event instead
            if (tabbrowser.getAttribute('opentabstop') === 'true') {
              scrollbuttonUp.onmousedown(event);
            } else {
              scrollbuttonDown.onmousedown(event);
            }
          } else if (tabbrowser.getAttribute('mouseInside') === 'true' && mouseY < topMax && mouseY > (topMax - 40)) {
            if (tabbrowser.getAttribute('opentabstop') === 'true') {
              scrollbuttonDown.onmousedown(event);
            } else {
              scrollbuttonUp.onmousedown(event);
            }
          } else {
            scrollbuttonUp.onmouseout();
            scrollbuttonDown.onmouseout();
          }

          // Determine what tab we're dragging over.
          // * Point of reference is the center of the dragged tab. If that
          //   point touches a background tab, the dragged tab would take that
          //   tab's position when dropped.
          // * We're doing a binary search in order to reduce the amount of
          //   tabs we need to check.

          let tabCenter = tabScreenPos + translateVal + tabSize / 2;
          let newIndex = -1;
          let oldIndex = 'animDropIndex' in draggedTab._dragData ?
                         draggedTab._dragData.animDropIndex : draggedTab._tPos;
          let low = 0;
          let high = tabs.length - 1;
          while (low <= high) {
            let mid = Math.floor((low + high) / 2);
            if (tabs[mid] === draggedTab &&
                ++mid > high) {
              break;
            }
            let boxObject = tabs[mid].boxObject;
            let screenPos = boxObject.screenY + getTabShift(tabs[mid], oldIndex);
            if (screenPos > tabCenter) {
              high = mid - 1;
            } else if (screenPos + boxObject.height < tabCenter) {
              low = mid + 1;
            } else {
              newIndex = tabs[mid]._tPos;
              break;
            }
          }
          if (newIndex >= oldIndex) {
            newIndex++;
          }
          if (newIndex < 0 || newIndex === oldIndex) {
            return;
          }
          draggedTab._dragData.animDropIndex = newIndex;

          // Shift background tabs to leave a gap where the dragged tab
          // would currently be dropped.

          for (let tab of tabs) {
            if (tab !== draggedTab) {
              let shift = getTabShift(tab, newIndex);
              tab.style.transform = shift ? 'translateY(' + shift + 'px)' : '';
            }
          }

          function getTabShift(tab, dropIndex) {
            if (tab._tPos < draggedTab._tPos && tab._tPos >= dropIndex) {
              return reverse ? -tabSize : tabSize;
            }
            if (tab._tPos > draggedTab._tPos && tab._tPos < dropIndex) {
              return reverse ? tabSize : -tabSize;
            }
            return 0;
          }
        ]]></body>
      </method>

      <method name="handleEvent">
        <parameter name="aEvent"/>
        <body><![CDATA[
          let width, height, relatedTarget;
          switch (aEvent.type) {
          case 'load':
            this.updateVisibility();
            if (typeof TabsInTitlebar._updateOnInit != 'undefined') {
              TabsInTitlebar.init();
            }
            break;
          case 'resize':
            if (aEvent.target !== window) {
              break;
            }

            TabsInTitlebar.updateAppearance();

            width = this.mTabstrip.boxObject.width;
            height = this.mTabstrip.boxObject.height;
            if ((!this._verticalTabs && width !== this.mTabstripWidth) ||
                (this._verticalTabs && height !== this.mTabstripHeight))
            {
              this.adjustTabstrip();
              this._fillTrailingGap();
              this._handleTabSelect();
              this.mTabstripWidth = width;
              this.mTabstripHeight = height;
            }

            if (this.tabbrowser.updateWindowResizers) {
              this.tabbrowser.updateWindowResizers(); //method only exists in older than v53
            }
            break;
          case 'mouseout':
            // If the 'related target' (the node to which the pointer went) is not
            // a child of the current document, the mouse just left the window.
            relatedTarget = aEvent.relatedTarget;
            if (!relatedTarget || relatedTarget.ownerDocument !== document) {
              if (document.getElementById('tabContextMenu').state !== 'open') {
                this._unlockTabSizing();
              }
            }
            break;
          case 'mousemove':
            if (document.getElementById('tabContextMenu').state !== 'open') {
              this._unlockTabSizing();
            }
            break;
          }
        ]]></body>
      </method>

      <!-- XXX todo: implement notifyBackgroundtab for vertical tabs-->

      <method name="_getDropIndex">
        <parameter name="event"/>
        <body><![CDATA[
          let verticalTabs = this._verticalTabs;

          let tabs = this.childNodes;
          let tab = this._getDragTargetTab(event);
          if (verticalTabs) {
            for (let i = tab ? tab._tPos : 0; i < tabs.length; i++) {
              if (event.screenY < tabs[i].boxObject.screenY + tabs[i].boxObject.height / 2) {
                return i;
              }
            }
          } else if (window.getComputedStyle(this, null).direction === 'ltr') {
            for (let i = tab ? tab._tPos : 0; i < tabs.length; i++) {
              if (event.screenX < tabs[i].boxObject.screenX + tabs[i].boxObject.width / 2) {
                return i;
              }
            }
          } else {
            for (let i = tab ? tab._tPos : 0; i < tabs.length; i++) {
              if (event.screenX > tabs[i].boxObject.screenX + tabs[i].boxObject.width / 2) {
                return i;
              }
            }
          }
          return tabs.length;
        ]]></body>
      </method>

      <method name="_notifyBackgroundTab">
        <parameter name="aTab"/>
        <body><![CDATA[
          if (aTab.pinned || aTab.hidden) {
            return;
          }

          let scrollRect = this.mTabstrip.scrollClientRect;
          let tab = aTab.getBoundingClientRect();
          this.mTabstrip._calcTabMargins(aTab);

          // DOMRect top/bottom properties are immutable.
          tab = {top: tab.top, bottom: tab.bottom};

          // Is the new tab already completely visible?
          if (scrollRect.top <= tab.top && tab.bottom <= scrollRect.bottom){
            return;
          }

          if (this.mTabstrip.smoothScroll) {
            let selected = !this.selectedItem.pinned &&
                           this.selectedItem.getBoundingClientRect();
            if (selected) {
              selected = {top: selected.top, bottom: selected.bottom};
            }

            // Can we make both the new tab and the selected tab completely visible?
            if (!selected ||
                Math.max(tab.bottom - selected.top, selected.bottom - tab.top) <=
                  scrollRect.height) {
              this.mTabstrip.ensureElementIsVisible(aTab);
              return;
            }

            this.mTabstrip._smoothScrollByPixels(this.mTabstrip._isRTLScrollbox ?
                                                 selected.bottom - scrollRect.bottom :
                                                 selected.top - scrollRect.top);
          }

          if (!this._animateElement.hasAttribute('notifybgtab')) {
            this._animateElement.setAttribute('notifybgtab', 'true');
            setTimeout(function (ele) {
              ele.removeAttribute('notifybgtab');
            }, 150, this._animateElement);
          }
        ]]></body>
      </method>
    </implementation>

    <handlers>
       <handler event="drop"><![CDATA[
          let tabbrowser = document.getElementById('tabbrowser-tabs');
          let scrollbox = document.getAnonymousElementByAttribute(tabbrowser, 'anonid', 'arrowscrollbox');
          let scrollbuttonDown = document.getAnonymousElementByAttribute(scrollbox, 'anonid', 'scrollbutton-down');
          let scrollbuttonUp = document.getAnonymousElementByAttribute(scrollbox, 'anonid', 'scrollbutton-up');
          scrollbuttonUp.onmouseout();
          scrollbuttonDown.onmouseout();
        ]]></handler>

      <handler event="dragover"><![CDATA[
        let effects = '';
        if (this._setEffectAllowedForDataTransfer) {
          effects = this._setEffectAllowedForDataTransfer(event);
        }

        let ind = this._tabDropIndicator;
        if (effects === '' || effects === 'none') {
          ind.collapsed = true;
          return;
        }
        event.preventDefault();
        event.stopPropagation();

        let tabStrip = this.mTabstrip;
        let verticalTabs = this._verticalTabs;
        let ltr = verticalTabs || (window.getComputedStyle(this, null).direction === 'ltr');

        // autoscroll the tab strip if we drag over the scroll
        // buttons, even if we aren't dragging a tab, but then
        // return to avoid drawing the drop indicator
        let pixelsToScroll = 0;
        if (this.getAttribute('overflow') === 'true') {
          let targetAnonid = event.originalTarget.getAttribute('anonid');
          switch (targetAnonid) {
          case 'scrollbutton-up':
            pixelsToScroll = tabStrip.scrollIncrement * -1;
            break;
          case 'scrollbutton-down':
            pixelsToScroll = tabStrip.scrollIncrement;
            break;
          }
          if (pixelsToScroll) {
            tabStrip.scrollByPixels((ltr ? 1 : -1) * pixelsToScroll);
          }
        }

        if (effects === 'move' &&
            this === event.dataTransfer.mozGetDataAt(TAB_DROP_TYPE, 0).parentNode) {
          // console.log('animateTabMove!');
          ind.collapsed = true;
          this._animateTabMove(event);
          return;
        }

        this._finishAnimateTabMove();

        if (effects === 'link') {
          let tab = this._getDragTargetTab(event);
          if (tab) {
            if (!this._dragTime) {
              this._dragTime = Date.now();
            }
            if (Date.now() >= this._dragTime + this._dragOverDelay) {
              this.selectedItem = tab;
            }
            ind.collapsed = true;
            return;
          }
        }

        let rect = tabStrip.getBoundingClientRect();
        let newMargin;
        if (pixelsToScroll) {
          // if we are scrolling, put the drop indicator at the edge
          // so that it doesn't jump while scrolling
          let scrollRect = tabStrip.scrollClientRect;

          if (verticalTabs) {
            let minMargin = scrollRect.top - rect.top;
            let maxMargin = Math.min(minMargin + scrollRect.height,
                                     scrollRect.bottom);
            newMargin = (pixelsToScroll > 0) ? maxMargin : minMargin;
          } else {
            let minMargin = scrollRect.left - rect.left;
            let maxMargin = Math.min(minMargin + scrollRect.width,
                                     scrollRect.right);
            if (!ltr) {
              [minMargin, maxMargin] = [this.clientWidth - maxMargin,
                                        this.clientWidth - minMargin];
            }
            newMargin = (pixelsToScroll > 0) ? maxMargin : minMargin;
          }
        }
        else {
          let newIndex = this._getDropIndex(event);
          if (newIndex === this.childNodes.length) {
            let tabRect = this.childNodes[newIndex - 1].getBoundingClientRect();
            if (verticalTabs) {
              newMargin = tabRect.bottom - rect.top;
            } else if (ltr) {
              newMargin = tabRect.right - rect.left;
            } else {
              newMargin = rect.right - tabRect.left;
            }
          }
          else {
            let tabRect = this.childNodes[newIndex].getBoundingClientRect();
            if (verticalTabs) {
              newMargin = tabRect.top - rect.top;
            } else if (ltr) {
              newMargin = tabRect.left - rect.left;
            } else {
              newMargin = rect.right - tabRect.right;
            }
          }
        }

        ind.collapsed = false;

        if (verticalTabs) {
          newMargin += ind.clientHeight / 2;
        } else {
          newMargin += ind.clientWidth / 2;
        }

        if (!ltr) {
          newMargin *= -1;
        }

        ind.style.transform = 'translate(' + Math.round(newMargin) + 'px)';
        if (verticalTabs) {
          ind.style.marginTop = (-ind.clientHeight) + 'px';
        } else {
          ind.style.MozMarginStart = (-ind.clientWidth) + 'px';
        }
      ]]></handler>

      <handler event="dragend"><![CDATA[
        // Note: while this case is correctly handled here, this event
        // isn't dispatched when the tab is moved within the tabstrip,
        // see bug 460801.

        this._finishAnimateTabMove();

        let dt = event.dataTransfer;
        let draggedTab = dt.mozGetDataAt(TAB_DROP_TYPE, 0);
        if (dt.mozUserCancelled || dt.dropEffect !== 'none' || this._isCustomizing) {
          delete draggedTab._dragData;
          return;
        }

        // Disable detach within the browser toolbox
        let eX = event.screenX;
        let eY = event.screenY;
        let wX = window.screenX;
        let wY = window.screenY;

        if (this._verticalTabs) {
          // check if the drop point is horizontally within the window
          if (eY > wY && eY < (wY + window.outerHeight)) {
            let bo = this.mTabstrip.boxObject;
            // also avoid detaching if the the tab was dropped too close to
            // the tabbar (half a tab)
            let endScreenX = bo.screenX + 1.5 * bo.width;
            if (eX < endScreenX && eX > window.screenX) {
              return;
            }
          }
        } else {
          // check if the drop point is horizontally within the window
          if (eX > wX && eX < (wX + window.outerWidth)) {
            let bo = this.mTabstrip.boxObject;
            // also avoid detaching if the the tab was dropped too close to
            // the tabbar (half a tab)
            let endScreenY = bo.screenY + 1.5 * bo.height;
            if (eY < endScreenY && eY > window.screenY) {
              return;
            }
          }
        }

        // screen.availLeft et. al. only check the screen that this window is on,
        // but we want to look at the screen the tab is being dropped onto.
        let sX = {}, sY = {}, sWidth = {}, sHeight = {};
        Cc['@mozilla.org/gfx/screenmanager;1']
          .getService(Ci.nsIScreenManager)
          .screenForRect(eX, eY, 1, 1)
          .GetAvailRect(sX, sY, sWidth, sHeight);
        // ensure new window entirely within screen
        let winWidth = Math.min(window.outerWidth, sWidth.value);
        let winHeight = Math.min(window.outerHeight, sHeight.value);
        let left = Math.min(Math.max(eX - draggedTab._dragData.offsetX, sX.value),
                            sX.value + sWidth.value - winWidth);
        let top = Math.min(Math.max(eY - draggedTab._dragData.offsetY, sY.value),
                           sY.value + sHeight.value - winHeight);

        delete draggedTab._dragData;

        if (this.tabbrowser.tabs.length === 1) {
          // resize _before_ move to ensure the window fits the new screen.  if
          // the window is too large for its screen, the window manager may do
          // automatic repositioning.
          window.resizeTo(winWidth, winHeight);
          window.moveTo(left, top);
          window.focus();
        } else {
          this.tabbrowser.replaceTabWithWindow(draggedTab, {screenX: left,
                                                            screenY: top,
                                                            });
        }
        event.stopPropagation();
      ]]></handler>
    </handlers>
  </binding>

  <binding id="tabbrowser-tab"
           extends="chrome://browser/content/tabbrowser.xml#tabbrowser-tab">
    <content context="tabContextMenu">
      <xul:stack class="tab-stack" flex="1">
        <xul:hbox xbl:inherits="pinned,selected,visuallyselected,fadein"
                  class="tab-background">
          <xul:hbox xbl:inherits="pinned,selected,visuallyselected"
                    class="tab-background-start"/>
          <xul:hbox xbl:inherits="pinned,selected,visuallyselected"
                    class="tab-background-middle"/>
          <xul:hbox xbl:inherits="pinned,selected,visuallyselected"
                    class="tab-background-end"/>
        </xul:hbox>
        <xul:hbox xbl:inherits="pinned,selected,visuallyselected,titlechanged,attention"
                  class="tab-content" align="center">
          <xul:vbox xbl:inherits="fadein,pinned,selected,visuallyselected,busy,crashed,sharing"
                     class="tab-meta-image">
            <html:canvas anonid="tab-meta-image"
                         width="54" height="40"/>
            <xul:image xbl:inherits="fadein,pinned,busy,progress,selected,visuallyselected"
                       class="tab-throbber"
                       role="presentation"
                       layer="true" />
            <xul:image xbl:inherits="src=image,fadein,pinned,selected,visuallyselected,busy,crashed,sharing"
                       anonid="tab-icon-image"
                       class="tab-icon-image"
                       validate="never"
                       role="presentation"/>
          </xul:vbox>
          <xul:image xbl:inherits="sharing,selected"
                     anonid="sharing-icon"
                     class="tab-sharing-icon-overlay"
                     role="presentation"/>
          <xul:image xbl:inherits="crashed,busy,soundplaying,pinned,muted"
                     anonid="overlay-icon"
                     class="tab-icon-overlay"
                     role="presentation"/>
          <xul:vbox class="title-wrapper" flex="1">
            <xul:label
                       xbl:inherits="value=label,crop,accesskey,fadein,pinned,selected,visuallyselected,attention"
                       class="tab-text"
                       role="presentation"/>
            <xul:label
                      xbl:inherits="value=address,crop,accesskey,fadein,pinned,selected,visuallyselected,attention"
                      class="tab-text address-label"
                      anonid="address-label"
                      role="presentation"/>
          </xul:vbox>
          <xul:image xbl:inherits="soundplaying,pinned,muted,visuallyselected"
                     anonid="soundplaying-icon"
                     class="tab-icon-sound"
                     role="presentation"/>
          <xul:stack>
            <xul:toolbarbutton anonid="close-button"
                               xbl:inherits="fadein,pinned,selected,visuallyselected"
                               class="tab-close-button close-icon"/>
            <xul:vbox xbl:inherits="pinned"
                      class="pinned-icon"
                      role="presentation"/>
          </xul:stack>
        </xul:hbox>
      </xul:stack>
    </content>

    <implementation>
      <constructor><![CDATA[
        const canvas = document.getAnonymousElementByAttribute(this, 'anonid', 'tab-meta-image');
        canvas.width *= window.devicePixelRatio;
        canvas.height *= window.devicePixelRatio;
       ]]></constructor>

      <method name="refreshThumbAndLabel">
        <body><![CDATA[
          /* global VerticalTabs:false, PageThumbs:false */
          if (!this.linkedBrowser) {
            // too soon.  Bail.
            return;
          }
          let uri = VerticalTabs.getUri(this);
          let url = uri.spec;
          this.updateUriLabel(uri);

          if (!this.parentNode.classList.contains('large-tabs')) {
            // no need for images.  Bail.
            return;
          }
          const canvas = document.getAnonymousElementByAttribute(this, 'anonid', 'tab-meta-image');
          if (VerticalTabs.newTabImage && (url === 'about:newtab' || url === 'about:blank')) {
            const ctx = canvas.getContext('2d');
            ctx.save();
            ctx.scale(
              canvas.width / VerticalTabs.newTabImage.width,
              canvas.height / VerticalTabs.newTabImage.height
              );
            ctx.drawImage(VerticalTabs.newTabImage, 0, 0);
            ctx.restore();
          } else {
            if (this.linkedBrowser.contentWindow) {
              let x = {};
              try {
                //sometimes captureToCanvas throws errors, stop them here instead
                this.linkedBrowser.contentWindow.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindowUtils).getPresShellId(x);
                PageThumbs.captureToCanvas(this.linkedBrowser, canvas);
              } catch (e) {
                //sometimes we can't get the background thumb yet, ignore it.
              }
            } else {
              PageThumbs.captureToCanvas(this.linkedBrowser, canvas);
            }
          }
        ]]></body>
      </method>

      <method name="updateUriLabel">
        <parameter name="uri"/>
        <body><![CDATA[
          let label = uri.spec;
          if (uri.scheme.startsWith('http')) {
            label = uri.host;
          }
          // URI can be shown immediately
          if (label) {
            this.setAttribute('address', label);
          }
        ]]></body>
      </method>
    </implementation>

  </binding>
</bindings>
